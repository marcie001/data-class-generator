package ${packageName};

<#list imports as imp>
import ${imp};
</#list>

/**
 * ${classJavaDoc}
 *
 */
public class ${className}${implementsLiteral} {

<#list fields as field>
	<#list field.fieldAnnotations as annotation>
	${annotation.javaLiteral}
	</#list>
	${field.definitionLiteral};

</#list>
	public ${className}() {}

	private ${className}(${allArguments}) {
<#list fields as field>
	<#if field.initializable>
		this.${field.name} = ${field.name};
	</#if>
</#list>
	}

	public static ${className}Builder builder() {
		return new ${className}Builder();
	}

<#list fields as field>
	<#if !field.staticField>
	public ${field.shortType} get${field.capitalizedName}() {
		return ${field.name};
	}

	</#if>
	<#if !field.finalField && !field.staticField>
	public void set${field.capitalizedName}(${field.shortType} ${field.name}) {
		this.${field.name} = ${field.name};
	}

	</#if>
</#list>
	@Override
	public String toString() {
		return ${toStringCode};
	}

	/**
	 * Builder of ${className} class.
	 *
	 */
	public static class ${className}Builder {
<#list fields as field>
	<#if field.initializable>
		${field.definitionLiteral};
	</#if>

</#list>
		private ${className}Builder() {}

		public ${className} build() {
			return new ${className}(${allInitializableFieldNames});
		}

<#list fields as field>
	<#if field.initializable>
		public ${className}Builder ${field.name}(${field.shortType} ${field.name}) {
			this.${field.name} = ${field.name};
			return this;
		}

	</#if>
</#list>
	}

}