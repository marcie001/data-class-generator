package ${packageName};

<#list imports as imp>
import ${imp};
</#list>

/**
 * ${classJavaDoc}
 *
 */
<#list classAnnotations as annotation>
${annotation.javaLiteral}
</#list>
public class ${className}${implementsLiteral} {

<#list fields as field>
	<#list field.fieldAnnotations as annotation>
	${annotation.javaLiteral}
	</#list>
	${field.definitionLiteral};

</#list>
	public ${className}() {}

	private ${className}(${allArguments}) {
<#list fields as field>
	<#if field.initializable>
		this.${field.name} = ${field.name};
	</#if>
</#list>
	}

	public static ${className}Builder builder() {
		return new ${className}Builder();
	}

<#list fields as field>
	<#if !field.staticField>
	public ${field.shortType} get${field.capitalizedName}() {
		return ${field.name};
	}

	</#if>
	<#if !field.finalField && !field.staticField>
	public void set${field.capitalizedName}(${field.shortType} ${field.name}) {
		this.${field.name} = ${field.name};
	}

	</#if>
</#list>
	@Override
	public String toString() {
		return ${toStringCode};
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof ${className})) {
			return false;
		}

		${className} other = (${className})o;
<#list fields as field>
	<#if field.instanceField>
		<#if field.type == 'byte' >
		if (Byte.compare(this.${field.name}, other.${field.name}) != 0) {
			return false;
		}
		<#elseif field.type == 'short' >
		if (Short.compare(this.${field.name}, other.${field.name}) != 0) {
			return false;
		}
		<#elseif field.type == 'int' >
		if (Integer.compare(this.${field.name}, other.${field.name}) != 0) {
			return false;
		}
		<#elseif field.type == 'long' >
		if (Long.compare(this.${field.name}, other.${field.name}) != 0) {
			return false;
		}
		<#elseif field.type == 'float' >
		if (Float.compare(this.${field.name}, other.${field.name}) != 0) {
			return false;
		}
		<#elseif field.type == 'double' >
		if (Double.compare(this.${field.name}, other.${field.name}) != 0) {
			return false;
		}
		<#elseif field.type == 'boolean' >
		if (Boolean.compare(this.${field.name}, other.${field.name}) != 0) {
			return false;
		}
		<#elseif field.type == 'char' >
		if (Character.compare(this.${field.name}, other.${field.name}) != 0) {
			return false;
		}
		<#elseif field.premitiveArray >
		if (!java.util.Arrays.equals(this.${field.name}, other.${field.name})) {
			return false;
		}
		<#elseif field.array >
		if (!java.util.Arrays.deepEquals(this.${field.name}, other.${field.name})) {
			return false;
		}
		<#else>
		if (!java.util.Objects.equals(this.${field.name}, other.${field.name})) {
			return false;
		}
		</#if>
	</#if>
</#list>
		return true;
	}

	@Override
	public int hashCode() {
		return ${hashCodeCode};
	}

	/**
	 * Builder of ${className} class.
	 *
	 */
	public static class ${className}Builder {
<#list fields as field>
	<#if field.initializable>
		${field.definitionLiteral};
	</#if>

</#list>
		private ${className}Builder() {}

		public ${className} build() {
			return new ${className}(${allInitializableFieldNames});
		}

<#list fields as field>
	<#if field.initializable>
		public ${className}Builder ${field.name}(${field.shortType} ${field.name}) {
			this.${field.name} = ${field.name};
			return this;
		}

	</#if>
</#list>
	}

}